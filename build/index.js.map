{"version":3,"sources":["../src/index.js"],"names":["sendToGit","source","destination","remote","options","length","Error","isAbsolute","tempDir","getTempDir","to","resolve","from","process","cwd","commitMessage","branch","deleteGlob","force","gitStatus","isNothingToCommit","stdout","indexOf","join","tmpdir"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;kBAUe,eAAeA,SAAf,CAAyBC,MAAzB,EAAiCC,WAAjC,EAA8CC,MAA9C,EAAsDC,UAAU,EAAhE,EAAoE;AACjF,MAAI,CAACH,MAAD,IAAWA,OAAOI,MAAP,KAAkB,CAA7B,IAAmC,CAACH,WAAD,IAAgBA,gBAAgB,EAAnE,IAA0E,CAACC,MAA/E,EAAuF;AACrF,UAAM,IAAIG,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,MAAI,eAAKC,UAAL,CAAgBL,WAAhB,CAAJ,EAAkC;AAChC,UAAM,IAAII,KAAJ,CAAW,4DAA2DJ,WAAY,IAAlF,CAAN;AACD;;AAED,QAAMM,UAAUC,YAAhB;AACA,QAAMC,KAAK,eAAKC,OAAL,CAAaH,OAAb,EAAsBN,WAAtB,CAAX;AACA,QAAMU,OAAO,eAAKD,OAAL,CAAaE,QAAQC,GAAR,EAAb,EAA4Bb,MAA5B,CAAb;AACA,QAAMc,gBAAgBX,QAAQW,aAAR,IAAyB,aAA/C;AACA,QAAMC,SAASZ,QAAQY,MAAR,IAAkB,QAAjC;AACA,QAAMC,aACJP,OAAOF,OAAP,GAAiB,CAAC,eAAKG,OAAL,CAAaD,EAAb,EAAiB,MAAjB,CAAD,EAA4B,IAAG,eAAKC,OAAL,CAAaD,EAAb,EAAiB,WAAjB,CAA8B,EAA7D,CAAjB,GAAmFA,EADrF;;AAGA,QAAM,mBAAIF,OAAJ,EAAa,EAAEU,OAAO,IAAT,EAAb,CAAN;AACA,QAAM,qBAAM,KAAN,EAAa,CAAC,OAAD,EAAU,SAAV,EAAqB,GAArB,EAA0Bf,MAA1B,EAAkCK,OAAlC,CAAb,CAAN;AACA,QAAM,mBAAIS,UAAJ,EAAgB,EAAEC,OAAO,IAAT,EAAhB,CAAN;AACA,QAAM,oBAAKN,IAAL,EAAWF,EAAX,CAAN;AACA,QAAMS,YAAY,MAAM,qBAAM,KAAN,EAAa,CAAC,QAAD,CAAb,EAAyB,EAAEL,KAAKN,OAAP,EAAzB,CAAxB;AACA,QAAMY,oBAAoBD,UAAUE,MAAV,CAAiBC,OAAjB,CAAyB,mBAAzB,IAAgD,CAAC,CAA3E;;AAEA,MAAI,CAACF,iBAAL,EAAwB;AACtB,UAAM,qBAAM,KAAN,EAAa,CAAC,UAAD,EAAaJ,MAAb,CAAb,EAAmC,EAAEF,KAAKN,OAAP,EAAnC,CAAN;AACA,UAAM,qBAAM,KAAN,EAAa,CAAC,KAAD,EAAQ,IAAR,EAAc,GAAd,CAAb,EAAiC,EAAEM,KAAKN,OAAP,EAAjC,CAAN;AACA,UAAM,qBAAM,KAAN,EAAa,CAAC,QAAD,EAAW,IAAX,EAAiBO,aAAjB,CAAb,EAA8C,EAAED,KAAKN,OAAP,EAA9C,CAAN;AACA,UAAM,qBAAM,KAAN,EAAa,CAAC,MAAD,EAAS,QAAT,EAAmBQ,MAAnB,CAAb,EAAyC,EAAEF,KAAKN,OAAP,EAAzC,CAAN;AACD;;AAED,QAAM,mBAAIA,OAAJ,EAAa,EAAEU,OAAO,IAAT,EAAb,CAAN;AACD,C;;AAED,SAAST,UAAT,GAAsB;AACpB,QAAMD,UAAU,eAAKe,IAAL,CAAU,aAAGC,MAAH,EAAV,EAAuB,aAAvB,EAAsC,kBAAtC,CAAhB;AACA,SAAOhB,OAAP;AACD","file":"index.js","sourcesContent":["import os from 'os';\nimport path from 'path';\nimport del from 'del';\nimport execa from 'execa';\nimport uuidv4 from 'uuid/v4';\nimport copy from './copy';\n\n/**\n * Keeps in sync a folder and their files with a folder of a git repository\n * @param {(string|string[])} source - Glob or array of globs to read.\n * @param {string} destination - Relative destination path.\n * @param {string} remote - git repository url.\n * @param {Object} [options]\n * @param {string} [options.commitMessage] - Commit message for the modifications.\n * @param {string} [options.branch] - Branch to add and push the changes.\n * @returns {Promise}\n */\nexport default async function sendToGit(source, destination, remote, options = {}) {\n  if (!source || source.length === 0 || (!destination && destination !== '') || !remote) {\n    throw new Error('\"source\", \"destination\" and \"remote\" are required');\n  }\n\n  if (path.isAbsolute(destination)) {\n    throw new Error(`\"destination\" needs to be a relative path, actual value \"${destination}\".`);\n  }\n\n  const tempDir = getTempDir();\n  const to = path.resolve(tempDir, destination);\n  const from = path.resolve(process.cwd(), source);\n  const commitMessage = options.commitMessage || 'Files added';\n  const branch = options.branch || 'master';\n  const deleteGlob =\n    to === tempDir ? [path.resolve(to, '**/*'), `!${path.resolve(to, '.git/**/*')}`] : to;\n\n  await del(tempDir, { force: true });\n  await execa('git', ['clone', '--depth', '1', remote, tempDir]);\n  await del(deleteGlob, { force: true });\n  await copy(from, to);\n  const gitStatus = await execa('git', ['status'], { cwd: tempDir });\n  const isNothingToCommit = gitStatus.stdout.indexOf('nothing to commit') > -1;\n\n  if (!isNothingToCommit) {\n    await execa('git', ['checkout', branch], { cwd: tempDir });\n    await execa('git', ['add', '-A', '.'], { cwd: tempDir });\n    await execa('git', ['commit', '-m', commitMessage], { cwd: tempDir });\n    await execa('git', ['push', 'origin', branch], { cwd: tempDir });\n  }\n\n  await del(tempDir, { force: true });\n}\n\nfunction getTempDir() {\n  const tempDir = path.join(os.tmpdir(), 'send-to-git', uuidv4());\n  return tempDir;\n}\n"]}